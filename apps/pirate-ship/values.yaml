global:
  apiKey: 87ef9531ddf4422e89d2fee8babbaabb
  pgUser: pirateship
  pgPassword: pirateshippassword

radarr:
  global:
    fullnameOverride: pirate-ship-radarr
    nameOverride: radarr
    annotations:
      app.kubernetes.io/instance: production-pirate-ship-radarr
  defaultPodOptions:
    annotations:
      app.kubernetes.io/instance: production-pirate-ship-radarr
  controllers:
    main: 
      enabled: true
      replicas: 1
      containers:
        main:
          image:
            repository: linuxserver/radarr
            tag: 5.4.6
            pullPolicy: IfNotPresent
          env:
            UMASK_SET: 022
            TZ: America/New_York
            PUID: 1000
            PGID: 1000
  ingress:
    main:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        gethomepage.dev/enabled: "true"
        gethomepage.dev/description: Radarr
        gethomepage.dev/group: Pirate Ship
        gethomepage.dev/icon: radarr.png
        gethomepage.dev/name: Radarr
      labels:
        access: private
      hosts:
        - host: radarr.[{ env "env_domain" }]
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: main
  service:
    main:
      controller: main
      primary: true
      ports:
        http:
          port: 7878
  persistence:
[{- if env "media_nfs_volumes_enabled" }]
    media:
      enabled: true
      type: nfs
      server: [{ env "media_nfs_volumes.server" }]
      path: [{ env "media_nfs_volumes.movies" }]
    downloads:
      enabled: true
      type: nfs
      server: [{ env "media_nfs_volumes.server" }]
      path: [{ env "media_nfs_volumes.downloads" }]
[{- end }]
    config:
      enabled: true
      type: configMap
      name: radarr-configxml
      advancedMounts:
        main:
          main:
          - path: /config/config.xml
            readOnly: false
            subPath: config.xml

sonarr:
  global:
    fullnameOverride: pirate-ship-sonarr
    nameOverride: sonarr
    annotations:
      app.kubernetes.io/instance: production-pirate-ship-radarr
  defaultPodOptions:
    annotations:
      app.kubernetes.io/instance: production-pirate-ship-sonarr
  controllers:
    main: 
      enabled: true
      replicas: 1
      containers:
        main:
          image:
            repository: linuxserver/sonarr
            tag: 4.0.4
            pullPolicy: IfNotPresent
          env:
            UMASK_SET: 022
            TZ: America/New_York
            PUID: 1000
            PGID: 1000
  ingress:
    main:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        gethomepage.dev/enabled: "true"
        gethomepage.dev/description: Sonarr
        gethomepage.dev/group: Pirate Ship
        gethomepage.dev/icon: sonarr.png
        gethomepage.dev/name: Sonarr
      labels:
        access: private
      hosts:
        - host: sonarr.[{ env "env_domain" }]
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: main
  service:
    main:
      controller: main
      primary: true
      ports:
        http:
          port: 8989
  persistence:
[{- if env "media_nfs_volumes_enabled" }]
    media:
      enabled: true
      type: nfs
      server: [{ env "media_nfs_volumes.server" }]
      path: [{ env "media_nfs_volumes.series" }]
    downloads:
      enabled: true
      type: nfs
      server: [{ env "media_nfs_volumes.server" }]
      path: [{ env "media_nfs_volumes.downloads" }]
[{- end }]
    config:
      enabled: true
      type: configMap
      name: sonarr-configxml
      advancedMounts:
        main:
          main:
          - path: /config/config.xml
            readOnly: false
            subPath: config.xml
prowlarr:
  global:
    fullnameOverride: pirate-ship-prowlarr
    nameOverride: prowlarr
    annotations:
      app.kubernetes.io/instance: production-pirate-ship-radarr
  defaultPodOptions:
    annotations:
      app.kubernetes.io/instance: production-pirate-ship-prowlarr
  controllers:
    main: 
      enabled: true
      replicas: 1
      containers:
        main:
          image:
            repository: linuxserver/prowlarr
            tag: 1.15.0
            pullPolicy: IfNotPresent
          env:
            UMASK_SET: 022
            TZ: America/New_York
            PUID: 1000
            PGID: 1000

  ingress:
    main:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        gethomepage.dev/enabled: "true"
        gethomepage.dev/description: Prowlarr
        gethomepage.dev/group: Pirate Ship
        gethomepage.dev/icon: prowlarr.png
        gethomepage.dev/name: Prowlarr
      labels:
        access: private
      hosts:
        - host: prowlarr.[{ env "env_domain" }]
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: main
  service:
    main:
      controller: main
      primary: true
      ports:
        http:
          port: 9696
  persistence:
    config:
      enabled: true
      type: configMap
      name: prowlarr-configxml
      advancedMounts:
        main:
          main:
          - path: /config/config.xml
            readOnly: false
            subPath: config.xml

sabnzbd:
  global:
    fullnameOverride: pirate-ship-sabnzbd
    nameOverride: sabnzbd
    annotations:
      app.kubernetes.io/instance: production-pirate-ship-radarr
  defaultPodOptions:
    annotations:
      app.kubernetes.io/instance: production-pirate-ship-sabnzbd
  controllers:
    main: 
      enabled: true
      replicas: 1
      containers:
        main:
          image:
            repository: linuxserver/sabnzbd
            tag: 4.2.3
            pullPolicy: IfNotPresent
          env:
            TZ: America/New_York
            PUID: 1000
            PGID: 1000
  ingress:
    main:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        gethomepage.dev/enabled: "true"
        gethomepage.dev/description: Sabnzbd
        gethomepage.dev/group: Pirate Ship
        gethomepage.dev/icon: sabnzbd.png
        gethomepage.dev/name: Sabnzbd
      labels:
        access: private
      hosts:
        - host: nzb.[{ env "env_domain" }]
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: main
  service:
    main:
      controller: main
      primary: true
      ports:
        http:
          port: 8080
  persistence:
[{- if env "media_nfs_volumes_enabled" }]
    downloads:
      enabled: true
      type: nfs
      server: [{ env "media_nfs_volumes.server" }]
      path: [{ env "media_nfs_volumes.downloads" }]
[{- end }]
    config:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 1Gi
      globalMounts:
        - path: /config

overseerr:
  global:
    fullnameOverride: pirate-ship-overseerr
    nameOverride: overseerr
    annotations:
      app.kubernetes.io/instance: production-pirate-ship-radarr
  defaultPodOptions:
    annotations:
      app.kubernetes.io/instance: production-pirate-ship-overseer
  controllers:
    main: 
      enabled: true
      replicas: 1
      containers:
        main:
          image:
            repository: linuxserver/overseerr
            tag: v1.33.2-ls102
            pullPolicy: IfNotPresent
          env:
            TZ: America/New_York
            PUID: 1000
            PGID: 1000
  ingress:
    main:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        gethomepage.dev/enabled: "true"
        gethomepage.dev/description: Overseerr
        gethomepage.dev/group: Pirate Ship
        gethomepage.dev/icon: overseerr.png
        gethomepage.dev/name: Overseerr
        external-dns.alpha.kubernetes.io/target: [{ env "external_dns_record_target" }]
      labels:
        access: public
      hosts:
        - host: netflix.[{ env "env_domain" }]
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: main
  service:
    main:
      controller: main
      primary: true
      ports:
        http:
          port: 5055
  persistence:
    config:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 1Gi
      globalMounts:
        - path: /config